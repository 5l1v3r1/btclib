add wallet infrastructure
add sign(address, msg) using wallet infrastrucure
report test vectors from P. Todd's library
report trailing/leading blank trimming in Electrum message signing

isinstance(entr, bytearray):
or
isinstance(entr, bytes):

revise ansi_x963_kdf
optimizations
    https://cryptojedi.org/peter/data/eccss-20130911b.pdf
    https://arxiv.org/abs/1801.08589
    https://ecc2017.cs.ru.nl/slides/ecc2017school-castryck.pdf
    https://hal.archives-ouvertes.fr/hal-00932199/document
    https://iacr.org/workshops/ches/ches2006/presentations/Douglas%20Stebila.pdf
    https://eprint.iacr.org/2005/419.pdf
transaction and block parsing (explorer based with optional full node)
revise ssa.pubkey_recovery
of a signature: verify or verification ? of a commit: verify or open ?
crack https://bitcoinmagazine.com/articles/deterministic-wallets-advantages-flaw-1385450276/
better mimic of electrum entropy search, they probably have the words inverted
BIP44 in address_from...

opposite in Jac coordinate using y_quadratic_residue ?

primitives for interactive threshold and musig

generalize ec, hf in borromean

Edwards curve (Curve25519)

BLS

reference borromean
deserialize curves from jason file
add signature serialize/deserialize to SSA
remove signtocontract, adding commit to dsa and ssa
e=0 in SSA ?

remove (ec, hf) in favor of network (global default?)

}

    def test_ledger_30(self):
        """Hybrid 0x30 ECDSA Bitcoin message signature generated by Ledger"""

        msg = b'\xfc1\xfe\xfb\xe7\xc6\x00\xd7\xbe"u\xe1d5V)\xa3J\x84\xfd0\xed`2\x91\xe2]\xf1\xa3Y\xda\x05'
        magic_msg = btcmsg._magic_hash(msg)

        # prvkey = 'e3b40d15b5790d50934f1e23acea62d81234617ebb7770148ae2e698b8f750e9'

        dersig = '3045022100ccf2400a86493bceb7af8d0a71fa085abb3b9760fe18b1c40bc362e828b82d08022026cb40f1988d404f67a3d2437979e970341ee32361cf87ecddfaab42fe5715f8'
        r, s, sighash = der.deserialize(dersig)
        self.assertIsNone(sighash)

        pubkey1 = '04 ae3d0d5c669ed364636e79e72abc012a33be63e537babddf56bfd393256acf6d ba0fac21da6386513674573a2d7baff4375c9b6d2498383853c52f0565f97f1a'
        pubkey2 = '03 ae3d0d5c669ed364636e79e72abc012a33be63e537babddf56bfd393256acf6d'
        # ECDSA signature verification
        dsa._verify(magic_msg, pubkey1, dersig)
        #dsa._verify(magic_msg, pubkey2, dersig)

        addr1 = p2pkh(pubkey1, False)
        addr2 = p2pkh(pubkey2, True)

        # equivalent Bitcoin Message Signature verification
        dersig = bytes.fromhex(dersig)
        rec_flag = 27 + 4 + (dersig[0] & 0x01)
        self.assertEqual(rec_flag, 31)

        self.assertRaises(AssertionError, btcmsg._verify, msg, addr1, (rec_flag, r, s))
        btcmsg._verify(msg, addr2, (rec_flag, r, s))

