#!/usr/bin/env python3

# Copyright (C) 2017-2019 The btclib developers
#
# This file is part of btclib. It is subject to the license terms in the
# LICENSE file found in the top-level directory of this distribution.
#
# No part of btclib including this file, may be copied, modified, propagated,
# or distributed except according to the terms contained in the LICENSE file.

import unittest
import os
import json

from btclib import bip32
from btclib import electrum

class TestMnemonicDictionaries(unittest.TestCase):
    def test_mnemonic(self):
        lang = "en"

        entropy = 0x110aaaa03974d093eda670121023cd0772
        eversion = 'standard'
        mnemonic = electrum.mnemonic_from_entropy(entropy, lang, eversion)
        entr = int(electrum.entropy_from_mnemonic(mnemonic, lang), 2)
        self.assertLess(entr-entropy, 0xfff)

        passphrase = ''

        xversion = b'\x04\x88\xAD\xE4'
        rootxprv = electrum.rootxprv_from_mnemonic(mnemonic, passphrase, xversion)
        # TODO: compare with the rootxprv generated by electrum
        rootxprv2 = electrum.rootxprv_from_entropy(entropy, passphrase, lang, xversion)
        self.assertEqual(rootxprv2, rootxprv)

        # unmanaged electrum mnemonic version
        mnemonic = "ability awful fetch liberty company spatial panda \
                    hat then canal ball cross video"
        self.assertRaises(ValueError, electrum.rootxprv_from_mnemonic,
                                      mnemonic, passphrase, xversion)
        #electrum_rootxprv_from_mnemonic(mnemonic, passphrase, xversion)

        # mnemonic version not in electrum allowed mnemonic versions
        eversion = 'std'
        self.assertRaises(ValueError, electrum.mnemonic_from_entropy,
                                      entropy, lang, eversion)
        #electrum_mnemonic_from_entropy(entropy, lang, eversion)


    def test_vectors(self):
        filename = "electrum_test_vectors.json"
        path_to_filename = os.path.join(os.path.dirname(__file__),
                                        "./data/",
                                        filename)
        with open(path_to_filename, 'r') as f:
            test_vectors = json.load(f)
        f.closed

        for test_vector in test_vectors:
            version = test_vector[0]
            mnemonic = test_vector[1]
            passphrase = test_vector[2]
            xpub = test_vector[3]

            xversion = bip32.PRV_VERSION[0]  #FIXME: version / xversion
            rootxprv = electrum.rootxprv_from_mnemonic(mnemonic, passphrase, xversion)
            xpub2 = bip32.xpub_from_xprv(rootxprv).decode()
            self.assertEqual(xpub2, xpub)

            lang = "en"
            entr = int(electrum.entropy_from_mnemonic(mnemonic, lang), 2)
            mnem = electrum.mnemonic_from_entropy(entr, lang, version)
            self.assertEqual(mnem, mnemonic)


if __name__ == "__main__":
    # execute only if run as a script
    unittest.main()
